name: Build, Tag, and Deploy to Minikube

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    
jobs:
  build-tag-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.KAL_APP_ID }}
          private-key: ${{ secrets.KAL_APP_SECRET }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build app
        run: npm run build

      - name: Get version from package.json
        id: get_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Configure Git
        id: configure-git
        run: |
          git config --global user.name 'kalystee-bot[bot]'
          git config --global user.email '1668121+kalystee-bot[bot]@users.noreply.github.com'
          git remote set-url origin https://x-access-token:${{ env.GH_TOKEN }}@github.com/${{ github.repository }}

      - name: Create Git tag
        id: tag
        run: |
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Set patch to new version
        id: set_patch_version
        if: "!startsWith(github.event.head_commit.message, '[RELEASE]')"
        run: |
          npm version patch -m ":bookmark: new version %s"
          git push origin main

      - name: Install kubectl
        uses: azure/setup-kubectl@v1

      - name: Deploy to Minikube
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBE_CONFIG_DATA" > ~/.kube/config
          kubectl apply -f kubernetes/deployment.yaml
